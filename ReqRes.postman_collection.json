{
	"info": {
		"_postman_id": "d9452b42-4cfb-4fa8-98fc-53204f1b743d",
		"name": "ReqRes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29056131",
		"_collection_link": "https://lunar-spaceship-294946.postman.co/workspace/simplilearn_aug10~a0c7ad7a-1691-4556-9bc8-c48faa3f1efe/collection/29056131-d9452b42-4cfb-4fa8-98fc-53204f1b743d?action=share&source=collection_link&creator=29056131"
	},
	"item": [
		{
			"name": "All user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the 'page' field is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.page).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.page).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the per_page field is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.per_page).to.exist.and.to.be.a('number', 'per_page should be a number');\r",
							"    pm.expect(responseData.per_page).to.be.at.least(0, 'per_page should be a non-negative integer');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the 'total' field is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.total).to.be.a('number');\r",
							"    pm.expect(responseData.total).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?page=2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.job).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Job is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check that id is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.job).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.updatedAt).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Job is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"updatedAt is a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Morpheus\",\r\n    \"job\": \"Doctor\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://dev.reqres.in"
		}
	]
}